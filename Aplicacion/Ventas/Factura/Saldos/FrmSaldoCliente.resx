<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEACACoCAAAFgAAACgAAAAgAAAAQAAAAAEACAAAAAAAAAQAAAAAAAAAAAAAAAEAAAAB
        AAAAAAAAFxcXABkkOQAdKT4ALzAwADQ0NAA3NzgAPj4+ABojQQAfK0IAHytKACMvRgAhL0sAJDNMACk6
        UwArPFwAPz9AACpAXwA/X1kALUJkAC1IbgAxRGQAM0ZoADFIZQA1SmsAOU9vADZLcwA2S3oAOU9wADpR
        bgA6VHYAP1d5AD5afAA/YFkANHVpAENDQwBKS0sAT1BQAEhYVQBUVFUAXFxcAEFPZwBBWnwASmF+AFhs
        aQBjY2MAZ2hoAGtrbABvb3AAY3NxAHNzcwB7fHwAO1KBAD1fiwBDXYAARmGLAEhkhgBKZo0ATmyPAEFn
        lgBPbpIASnGfAFBvlABSc5sAVnigAFt8owBRf7UAY3mTACqWfgA8k4MAXoKuAFuCtQBGrpsAV6CXAFy4
        pwBxiIQAf4CAAGiGrQBsjLUAaY68AG2SvQBylL8AYbqpAHKXxgB1msQAd5rJAHiawwB5ncoAfqLHAH6h
        zAB+pdQAcMGzAHbIuQB8x7kAg4SEAIeIiACLi4sAj5CRAJGRkQCbm5sAjZqpAJ+gnwCfoqEAoqOjAKG/
        uQCusLEArrS7ALK1tQCyuLcAury8AIGhzACCpdEAganUAIas2wCOrdIAjLHXAJKy0gCEreEAiK/gAI+1
        5ACRt+YAkbboAJS45QCVuugAnbzkAJq+7gCgveMAhce5AJ3A7wCew/IApMvHAKjIwgCtxdgAvMPBALzN
        yQCvxuQArc3vAKXG8wCkyvQArs33AKzN+wCwz/kAtNL9ALrW/AC+2PwAwsrUAMPb/QDJ3/4A3d/iANXg
        3QDM4f4A0OzmANji4ADR5f4A4unyAOX38wDz8/MA9/j5APv7+wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        Af//wAP//+AH///4D///////
</value>
  </data>
</root>